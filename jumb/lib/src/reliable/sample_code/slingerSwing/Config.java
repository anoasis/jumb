/* 
 * Copyright (c) 2001, Sun Microsystems Laboratories 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met: 
 * 
 *     Redistributions of source code must retain the 
 *     above copyright notice, this list of conditions 
 *     and the following disclaimer. 
 *             
 *     Redistributions in binary form must reproduce 
 *     the above copyright notice, this list of conditions 
 *     and the following disclaimer in the documentation 
 *     and/or other materials provided with the distribution. 
 *             
 *     Neither the name of Sun Microsystems, Inc. nor 
 *     the names of its contributors may be used to endorse 
 *     or promote products derived from this software without 
 *     specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE. 
 */

/*
 * A basic extension of the java.awt.Dialog class
 */
package com.sun.multicast.reliable.applications.slinger;

import java.awt.*;
import javax.swing.*;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.File;

/**
 * Undocumented Class Declaration.
 * 
 * 
 * @see
 *
 * @author
 */
public class Config extends Dialog {

    /**
     * Undocumented Class Constructor.
     * 
     * 
     * @param parent
     * @param modal
     * @param configFile
     *
     * @see
     */
    public Config(SlingerSwing parent, boolean modal, String configFile) {
        super(parent, modal);

        fParent = parent;

        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        // {{INIT_CONTROLS

        setLayout(null);
        setVisible(false);
        setSize(451, 365);
        setForeground(new Color(0));
        setBackground(new Color(16777215));

        label1 = new java.awt.Label("Configuration File:");

        label1.setBounds(12, 12, 246, 29);
        add(label1);

        ConfigFileText = new java.awt.TextField();

        ConfigFileText.setBounds(12, 48, 348, 29);
        add(ConfigFileText);

        BrowseButton = new java.awt.Button();

        BrowseButton.setLabel("Browse...");
        BrowseButton.setBounds(360, 48, 70, 24);
        BrowseButton.setBackground(new Color(16777215));
        add(BrowseButton);

        Group1 = new CheckboxGroup();
        loadSettings = 
            new java.awt.Checkbox(
		"Load All Settings from the Configuration File", 
		Group1, true);

        loadSettings.setBounds(80, 120, 307, 29);
        add(loadSettings);

        saveSettings = 
            new java.awt.Checkbox(
		"Save Current Settings to the Configuration File", 
                Group1, false);

        saveSettings.setBounds(80, 216, 331, 29);
        add(saveSettings);

        OKButton = new java.awt.Button();

        OKButton.setLabel("OK");
        OKButton.setBounds(143, 306, 61, 21);
        OKButton.setBackground(new Color(16777215));
        add(OKButton);

        CancelButton = new java.awt.Button();

        CancelButton.setLabel("Cancel");
        CancelButton.setBounds(239, 306, 68, 22);
        CancelButton.setBackground(new Color(16777215));
        add(CancelButton);

        autoLoadCheckbox = 
            new java.awt.Checkbox(
		"Automatically load this configuration file at startup");

        autoLoadCheckbox.setBounds(13, 74, 347, 29);
        add(autoLoadCheckbox);

        imagePanel1 = new ImagePanel("images/loadfrfl.JPG");

        imagePanel1.setBounds(164, 150, 69, 47);
        imagePanel1.setBackground(Color.white);
        imagePanel1.setLayout(null);
        add(imagePanel1);

        imagePanel2 = new ImagePanel("images/savetofl.JPG");

        imagePanel2.setBounds(157, 245, 81, 46);
        imagePanel2.setBackground(Color.white);
        imagePanel2.setLayout(null);
        add(imagePanel2);
        setTitle("Sun Labs Slinger - Configuration");

        // }}

        ConfigFileText.setText(configFile);

        // {{REGISTER_LISTENERS

        SymWindow aSymWindow = new SymWindow();

        this.addWindowListener(aSymWindow);

        SymMouse aSymMouse = new SymMouse();

        OKButton.addMouseListener(aSymMouse);
        CancelButton.addMouseListener(aSymMouse);
        BrowseButton.addMouseListener(aSymMouse);

        // }}
        // check for an auto load config file check the box if it exists

        try {
            char sAutoLoadConfigFile[];

            sAutoLoadConfigFile = new char[100];

            FileReader fAutoLoadFile = new FileReader("slgrconf.ini");

            fAutoLoadFile.read(sAutoLoadConfigFile, 0, 100);
            fAutoLoadFile.close();

            // if we got this far, it is there.

            autoLoadCheckbox.setState(true);
        } catch (java.io.FileNotFoundException error) {}
        catch (java.io.IOException e) {}
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @see
     */
    public void addNotify() {

        // Record the size of the window prior to calling parents addNotify.

        Dimension d = getSize();

        super.addNotify();

        if (fComponentsAdjusted) {
            return;
        } 

        try {

            // try jdk1.2 method getInsets().
            // Adjust components according to the insets

            setSize(getInsets().left + getInsets().right + d.width, 
                    getInsets().top + getInsets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(getInsets().left, getInsets().top);
                components[i].setLocation(p);
            }
        } catch (NoSuchMethodError e) {

            // try jdk1.1 method insets().
            // Adjust components according to the insets

            setSize(insets().left + insets().right + d.width, 
                    insets().top + insets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(insets().left, insets().top);
                components[i].setLocation(p);
            }
        }

        fComponentsAdjusted = true;
    }

    // Used for addNotify check.

    boolean fComponentsAdjusted = false;
    String fConfigFile;
    boolean fLoadFile = true;
    java.awt.FileDialog fDialog;
    SlingerSwing fParent;

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @see
     */
    public synchronized void show() {
        try {

            // try jdk1.2 method getBounds().

            Rectangle bounds = getParent().getBounds();
            Rectangle abounds = getBounds();

            setLocation(bounds.x + (bounds.width - abounds.width) / 2, 
                        bounds.y + (bounds.height - abounds.height) / 2);
        } catch (NoSuchMethodError e) {

            // try jdk1.1 method bounds().

            Rectangle bounds = getParent().bounds();
            Rectangle abounds = bounds();

            move(bounds.x + (bounds.width - abounds.width) / 2, 
                 bounds.y + (bounds.height - abounds.height) / 2);
        }

        super.show();
    }

    // {{DECLARE_CONTROLS

    java.awt.Label label1;
    java.awt.TextField ConfigFileText;
    java.awt.Button BrowseButton;
    java.awt.Checkbox loadSettings;
    CheckboxGroup Group1;
    java.awt.Checkbox saveSettings;
    java.awt.Button OKButton;
    java.awt.Button CancelButton;
    java.awt.Checkbox autoLoadCheckbox;
    ImagePanel imagePanel1;
    ImagePanel imagePanel2;

    // }}

    /**
     * Undocumented Class Declaration.
     * 
     * 
     * @see
     *
     * @author
     */
    class SymWindow extends java.awt.event.WindowAdapter {

        /**
         * Undocumented Method Declaration.
         * 
         * 
         * @param event
         *
         * @see
         */
        public void windowClosing(java.awt.event.WindowEvent event) {
            Object object = event.getSource();

            if (object == Config.this) {
                Dialog1_WindowClosing(event);
            } 
        }

    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void Dialog1_WindowClosing(java.awt.event.WindowEvent event) {
        try {

            // try jdk 1.2 method setVisible().

            setVisible(false);
        } catch (NoSuchMethodError e) {

            // try jdk 1.1 method hide().

            hide();
        }
    }

    /**
     * Undocumented Class Declaration.
     * 
     * 
     * @see
     *
     * @author
     */
    class SymMouse extends java.awt.event.MouseAdapter {

        /**
         * Undocumented Method Declaration.
         * 
         * 
         * @param event
         *
         * @see
         */
        public void mouseClicked(java.awt.event.MouseEvent event) {
            Object object = event.getSource();

            if (object == OKButton) {
                OKButton_MouseClick(event);
            } else if (object == CancelButton) {
                CancelButton_MouseClick(event);
            } else if (object == BrowseButton) {
                BrowseButton_MouseClick(event);
            } 
        }

    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void OKButton_MouseClick(java.awt.event.MouseEvent event) {

        // OK Button
        // This is where we need to load or save the config file
        // first check the status of the radio buttons

        fLoadFile = loadSettings.getState();

        // first make sure this is a config file

        String fConfigFileName = ConfigFileText.getText();

        fConfigFileName.trim();

        if (fConfigFileName.length() == 0) {

            // the user did not type any config file information

            MessageBox m = 
                new MessageBox(fParent, "Sun Labs Slinger", 
                               "You must enter a configuration file name.");

            m.dispose();

            return;
        }
        if (fLoadFile == true) {

            // lets try to load the config file

            if (fParent.load(fConfigFileName) == false) {
                MessageBox m = new MessageBox(fParent, "Sun Labs Slinger", 
                                              "Configuration file " 
                                              + fConfigFileName 
                                              + " could not load.");

                m.dispose();

                return;
            }
        } else {

            // lets try to save the config file

            if (fParent.save(fConfigFileName) == false) {
                MessageBox m = new MessageBox(fParent, "Sun Labs Slinger", 
                                              "Configuration file " 
                                              + fConfigFileName 
                                              + " could not be saved.");

                m.dispose();

                return;
            }
        }

        // now check the autoload feature

        if (autoLoadCheckbox.getState() == true) {

            // just write out a simple file to this directory

            try {
                FileWriter fAutoLoadFile = new FileWriter("slgrconf.ini");

                fAutoLoadFile.write(fConfigFileName);
                fAutoLoadFile.close();
            } catch (java.io.IOException e) {}
        } else {
            // delete the file if it is there

            File fAutoLoadFile = new File("slgrconf.ini");

            if (fAutoLoadFile.exists() == true) {
                try {
                    fAutoLoadFile.delete();
                } catch (java.lang.SecurityException e) {}
            }
        }

        setVisible(false);
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void CancelButton_MouseClick(java.awt.event.MouseEvent event) {
        setVisible(false);
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void BrowseButton_MouseClick(java.awt.event.MouseEvent event) {

        // first check the status of the radio buttons

        fLoadFile = loadSettings.getState();

        // browse button

        fDialog = new java.awt.FileDialog(fParent, "Find Configuration File", 
                                          fLoadFile 
                                          ? java.awt.FileDialog.LOAD 
                                          : java.awt.FileDialog.SAVE);

        String fConfigStr = "*.cfg";

        fDialog.setFile(fConfigStr);
        fDialog.show();

        // now get the file name and put it in the text field

        String fFileName = fDialog.getFile();

        fConfigFile = fDialog.getDirectory() + fFileName;

        // XXX JEP Need to make sure fFileName is not null!

        if (fFileName.compareTo("null") != 0) {
            ConfigFileText.setText(fConfigFile);
        } 

        // get rid of the dialog so it can be created from scratch next time

        fDialog.dispose();
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @return
     *
     * @see
     */
    String getConfigFile() {
        return fConfigFile;
    }

}

