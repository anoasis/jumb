/* 
 * Copyright (c) 2001, Sun Microsystems Laboratories 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met: 
 * 
 *     Redistributions of source code must retain the 
 *     above copyright notice, this list of conditions 
 *     and the following disclaimer. 
 *             
 *     Redistributions in binary form must reproduce 
 *     the above copyright notice, this list of conditions 
 *     and the following disclaimer in the documentation 
 *     and/or other materials provided with the distribution. 
 *             
 *     Neither the name of Sun Microsystems, Inc. nor 
 *     the names of its contributors may be used to endorse 
 *     or promote products derived from this software without 
 *     specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE. 
 */

/*
 * A basic extension of the java.awt.Dialog class
 */
package com.sun.multicast.reliable.applications.slinger;

import java.awt.*;
import java.lang.String;
import java.net.URL;
import javax.swing.*;

/**
 * Undocumented Class Declaration.
 * 
 * 
 * @see
 *
 * @author
 */
public class SendDialog extends Dialog implements Runnable {

    /**
     * Undocumented Class Constructor.
     * 
     * 
     * @param parent
     * @param modal
     *
     * @see
     */
    public SendDialog(SlingerSwing parent, boolean modal) {
        super(parent, modal);

        fParent = parent;

        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        // {{INIT_CONTROLS

        setLayout(null);
        setVisible(false);
        setSize(626, 284);
        setFont(new Font("Dialog", Font.PLAIN, 12));
        setForeground(new Color(0));
        setBackground(new Color(16777215));

        progressBar = new javax.swing.JProgressBar();

        progressBar.setOrientation(JProgressBar.HORIZONTAL);
        progressBar.setBounds(193, 210, 204, 29);
        progressBar.setMinimum(1);
        progressBar.setMaximum(100);
        add(progressBar);

        CancelButton = new java.awt.Button();

        CancelButton.setLabel("Cancel");
        CancelButton.setBounds(492, 228, 72, 25);
        CancelButton.setForeground(new Color(0));
        CancelButton.setBackground(new Color(16777215));
        add(CancelButton);

        fileNameLabel = new java.awt.Label("");

        fileNameLabel.setBounds(26, 246, 448, 21);
        add(fileNameLabel);
        setTitle("Sun Labs Slinger");

        // }}
        // {{REGISTER_LISTENERS

        SymWindow aSymWindow = new SymWindow();

        this.addWindowListener(aSymWindow);

        SymMouse aSymMouse = new SymMouse();

        CancelButton.addMouseListener(aSymMouse);

        // }}
        // create the animation sequences
        // create the images of balls

        sendBallsAnimation = new Image[ballsAnimationFrames];
        receiveBallsAnimation = new Image[ballsAnimationFrames];
        receiveAnimation = new Image[receiveAnimationFrames];
        receiveDanceAnimation = new Image[danceAnimationFrames];
        sendDanceAnimation = new Image[danceAnimationFrames];
        sendAnimation = new Image[sendAnimationFrames];

        try {
            MediaTracker mt = new MediaTracker(this);
            int i;

            sendBallsAnimation[0] = 
                Toolkit.getDefaultToolkit().getImage("images/1sendballs.GIF");
            sendBallsAnimation[1] = 
                Toolkit.getDefaultToolkit().getImage("images/2sendballs.GIF");
            sendBallsAnimation[2] = 
                Toolkit.getDefaultToolkit().getImage("images/3sendballs.GIF");
            sendBallsAnimation[3] = 
                Toolkit.getDefaultToolkit().getImage("images/4sendballs.GIF");
            sendBallsAnimation[4] = 
                Toolkit.getDefaultToolkit().getImage("images/5sendballs.GIF");
            sendBallsAnimation[5] = 
                Toolkit.getDefaultToolkit().getImage("images/6sendballs.GIF");
            sendBallsAnimation[6] = 
                Toolkit.getDefaultToolkit().getImage("images/7sendballs.GIF");
            sendBallsAnimation[7] = 
                Toolkit.getDefaultToolkit().getImage("images/8sendballs.GIF");
            sendBallsAnimation[8] = 
                Toolkit.getDefaultToolkit().getImage("images/9sendballs.GIF");
            sendBallsAnimation[9] = 
                Toolkit.getDefaultToolkit().getImage(
		"images/10sendballs.GIF");

            for (i = 0; i < ballsAnimationFrames; i++) {
                mt.addImage(sendBallsAnimation[i], 0);
            }

            receiveBallsAnimation[0] = 
                Toolkit.getDefaultToolkit().getImage("images/1recballs.GIF");
            receiveBallsAnimation[1] = 
                Toolkit.getDefaultToolkit().getImage("images/2recballs.GIF");
            receiveBallsAnimation[2] = 
                Toolkit.getDefaultToolkit().getImage("images/3recballs.GIF");
            receiveBallsAnimation[3] = 
                Toolkit.getDefaultToolkit().getImage("images/4recballs.GIF");
            receiveBallsAnimation[4] = 
                Toolkit.getDefaultToolkit().getImage("images/5recballs.GIF");
            receiveBallsAnimation[5] = 
                Toolkit.getDefaultToolkit().getImage("images/6recballs.GIF");
            receiveBallsAnimation[6] = 
                Toolkit.getDefaultToolkit().getImage("images/7recballs.GIF");
            receiveBallsAnimation[7] = 
                Toolkit.getDefaultToolkit().getImage("images/8recballs.GIF");
            receiveBallsAnimation[8] = 
                Toolkit.getDefaultToolkit().getImage("images/9recballs.GIF");
            receiveBallsAnimation[9] = 
                Toolkit.getDefaultToolkit().getImage("images/10recballs.GIF");

            for (i = 0; i < ballsAnimationFrames; i++) {
                mt.addImage(receiveBallsAnimation[i], 0);
            }

            // send and receive animations

            receiveAnimation[0] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke1.GIF");
            receiveAnimation[1] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke2.GIF");
            receiveAnimation[2] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke3.GIF");
            receiveAnimation[3] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke4.GIF");
            receiveAnimation[4] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke5.GIF");
            receiveAnimation[5] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke6.GIF");
            receiveAnimation[6] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke7.GIF");
            receiveAnimation[7] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke8.GIF");
            receiveAnimation[8] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke9.GIF");
            receiveAnimation[9] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke10.GIF");
            receiveAnimation[10] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke11.GIF");
            receiveAnimation[11] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke12.GIF");
            receiveAnimation[12] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke13.GIF");
            receiveAnimation[13] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke14.GIF");
            receiveAnimation[14] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke15.GIF");
            receiveAnimation[15] = 
                Toolkit.getDefaultToolkit().getImage("images/rcduke16.GIF");

            for (i = 0; i < receiveAnimationFrames; i++) {
                mt.addImage(receiveAnimation[i], 0);
            }

            receiveDanceAnimation[0] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc1.GIF");
            receiveDanceAnimation[1] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc2.GIF");
            receiveDanceAnimation[2] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc3.GIF");
            receiveDanceAnimation[3] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc4.GIF");
            receiveDanceAnimation[4] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc5.GIF");
            receiveDanceAnimation[5] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc6.GIF");
            receiveDanceAnimation[6] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc7.GIF");
            receiveDanceAnimation[7] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc8.GIF");
            receiveDanceAnimation[8] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc9.GIF");
            receiveDanceAnimation[9] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc10.GIF");
            receiveDanceAnimation[10] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc11.GIF");
            receiveDanceAnimation[11] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc12.GIF");
            receiveDanceAnimation[12] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc13.GIF");
            receiveDanceAnimation[13] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc14.GIF");
            receiveDanceAnimation[14] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc15.GIF");
            receiveDanceAnimation[15] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc16.GIF");
            receiveDanceAnimation[16] = 
                Toolkit.getDefaultToolkit().getImage("images/recdanc17.GIF");

            for (i = 0; i < danceAnimationFrames; i++) {
                mt.addImage(receiveDanceAnimation[i], 0);
            }

            sendDanceAnimation[0] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc1.GIF");
            sendDanceAnimation[1] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc2.GIF");
            sendDanceAnimation[2] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc3.GIF");
            sendDanceAnimation[3] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc4.GIF");
            sendDanceAnimation[4] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc5.GIF");
            sendDanceAnimation[5] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc6.GIF");
            sendDanceAnimation[6] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc7.GIF");
            sendDanceAnimation[7] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc8.GIF");
            sendDanceAnimation[8] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc9.GIF");
            sendDanceAnimation[9] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc10.GIF");
            sendDanceAnimation[10] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc11.GIF");
            sendDanceAnimation[11] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc12.GIF");
            sendDanceAnimation[12] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc13.GIF");
            sendDanceAnimation[13] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc14.GIF");
            sendDanceAnimation[14] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc15.GIF");
            sendDanceAnimation[15] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc16.GIF");
            sendDanceAnimation[16] = 
                Toolkit.getDefaultToolkit().getImage("images/sendanc17.GIF");

            for (i = 0; i < danceAnimationFrames; i++) {
                mt.addImage(sendDanceAnimation[i], 0);
            }

            sendAnimation[0] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld1.GIF");
            sendAnimation[1] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld2.GIF");
            sendAnimation[2] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld3.GIF");
            sendAnimation[3] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld4.GIF");
            sendAnimation[4] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld5.GIF");
            sendAnimation[5] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld6.GIF");
            sendAnimation[6] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld7.GIF");
            sendAnimation[7] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld8.GIF");
            sendAnimation[8] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld9.GIF");
            sendAnimation[9] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld10.GIF");
            sendAnimation[10] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld11.GIF");
            sendAnimation[11] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld12.GIF");
            sendAnimation[12] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld13.GIF");
            sendAnimation[13] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld14.GIF");
            sendAnimation[14] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld15.GIF");
            sendAnimation[15] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld16.GIF");
            sendAnimation[16] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld17.GIF");
            sendAnimation[17] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld18.GIF");
            sendAnimation[18] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld19.GIF");
            sendAnimation[19] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld20.GIF");
            sendAnimation[20] = 
                Toolkit.getDefaultToolkit().getImage("images/sendcld21.GIF");

            for (i = 0; i < sendAnimationFrames; i++) {
                mt.addImage(sendAnimation[i], 0);
            }

            mt.waitForAll();

            if (mt.isErrorAny()) {
                System.err.println("Error loading images.");
            }
        } catch (InterruptedException ie) {
            new MessageBox(parent, "Sun Labs Slinger", 
                           "Image loading interrupted.");
        }

        currentMainAnimation = receiveAnimation;
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @see
     */
    public void addNotify() {

        // Record the size of the window prior to calling parents addNotify.

        Dimension d = getSize();

        super.addNotify();

        if (fComponentsAdjusted) {
            return;
        } 

        try {

            // try jdk1.2 method getInsets().
            // Adjust components according to the insets

            setSize(getInsets().left + getInsets().right + d.width, 
                    getInsets().top + getInsets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(getInsets().left, getInsets().top);
                components[i].setLocation(p);
            }
        } catch (NoSuchMethodError e) {

            // try jdk1.1 method insets().
            // Adjust components according to the insets

            setSize(insets().left + insets().right + d.width, 
                    insets().top + insets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(insets().left, insets().top);
                components[i].setLocation(p);
            }
        }

        fComponentsAdjusted = true;
    }

    // Used for addNotify check.

    boolean fComponentsAdjusted = false;
    private SlingerSwing fParent;

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @see
     */
    public synchronized void show() {
        try {

            // try jdk1.2 method getBounds().

            Rectangle bounds = getParent().getBounds();
            Rectangle abounds = getBounds();

            setLocation(bounds.x + (bounds.width - abounds.width) / 2, 
                        bounds.y + (bounds.height - abounds.height) / 2);
        } catch (NoSuchMethodError e) {

            // try jdk1.1 method bounds().

            Rectangle bounds = getParent().bounds();
            Rectangle abounds = bounds();

            move(bounds.x + (bounds.width - abounds.width) / 2, 
                 bounds.y + (bounds.height - abounds.height) / 2);
        }

        super.show();
    }

    // {{DECLARE_CONTROLS

    javax.swing.JProgressBar progressBar;
    java.awt.Button CancelButton;
    java.awt.Label fileNameLabel;

    // }}

    /**
     * Undocumented Class Declaration.
     * 
     * 
     * @see
     *
     * @author
     */
    class SymWindow extends java.awt.event.WindowAdapter {

        /**
         * Undocumented Method Declaration.
         * 
         * 
         * @param event
         *
         * @see
         */
        public void windowClosing(java.awt.event.WindowEvent event) {
            Object object = event.getSource();

            if (object == SendDialog.this) {
                Dialog1_WindowClosing(event);
            } 
        }

    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void Dialog1_WindowClosing(java.awt.event.WindowEvent event) {
        try {

            // try jdk1.2 method setVisible().

            setVisible(false);
        } catch (NoSuchMethodError e) {

            // try jdk1.1 method hide().

            hide();
        }
    }

    /**
     * Undocumented Class Declaration.
     * 
     * 
     * @see
     *
     * @author
     */
    class SymMouse extends java.awt.event.MouseAdapter {

        /**
         * Undocumented Method Declaration.
         * 
         * 
         * @param event
         *
         * @see
         */
        public void mouseClicked(java.awt.event.MouseEvent event) {
            Object object = event.getSource();

            if (object == CancelButton) {
                CancelButton_MouseClick(event);
            } 
        }

    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void CancelButton_MouseClick(java.awt.event.MouseEvent event) {
        stopAnimation();

        // we want to stop running the thread in slinger

        fParent.stopSlingerThread();
    }

    /*
     * Method to set the level of mercury in the Progress thermometer.
     */

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param l
     *
     * @see
     */
    void setLevel(int l) {
        progressBar.setValue(l);
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param message
     *
     * @see
     */
    void setMessage(String message) {
        fileNameLabel.setText(message);
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param send
     * @param idle
     * @param start
     *
     * @see
     */
    void setMode(boolean send, boolean idle, boolean start) {
        setLevel(0);

        bSending = send;
        bIdle = idle;

        if (send == true) {
            if (start) {
                iNumberOfBalls = 10;
            } 
            if (idle == true) {
                currentMainAnimation = sendDanceAnimation;
                iNumberOfFrames = danceAnimationFrames;
            } else {
                currentMainAnimation = sendAnimation;
                iNumberOfFrames = sendAnimationFrames;
            }

            currentBallsAnimation = sendBallsAnimation;
            iXBallLocation = iXSendBallLocation;
            iYBallLocation = iYSendBallLocation;
            iXMainLocation = iXSendAnimationLocation;
            iYMainLocation = iYSendAnimationLocation;
        } else {

            // receive

            if (start) {
                iNumberOfBalls = 0;
            } 
            if (idle == true) {
                currentMainAnimation = receiveDanceAnimation;
                iNumberOfFrames = danceAnimationFrames;
            } else {
                currentMainAnimation = receiveAnimation;
                iNumberOfFrames = receiveAnimationFrames;
            }

            currentBallsAnimation = receiveBallsAnimation;
            iXBallLocation = iXReceiveBallLocation;
            iYBallLocation = iYReceiveBallLocation;
            iXMainLocation = iXReceiveAnimationLocation;
            iYMainLocation = iYReceiveAnimationLocation;
        }
    }

    /**
     * Starts the animation.
     * @see #stopAnimation
     */
    public void startAnimation() {
        if (displayThread == null) {
            displayThread = new Thread(this);

            displayThread.start();
        }
    }

    /**
     * Stops the animation.
     * @see #startAnimation
     */
    public void stopAnimation() {
        if (displayThread != null) {

            // displayThread.stop();	// deprecated
            // System.out.println("stopAnimation()");

            displayThread = null;
            bIdle = true;
            bSending = true;
        }
    }

    /**
     * Body of Animation Thread.  This method is called by the Java Virtual 
     * Machine in response to a call to the start method of this object.
     */
    public synchronized void run() {
        Thread currentThread = Thread.currentThread();

        while (currentThread == displayThread) {
            for (int j = 0; j < iNumberOfFrames; ++j) {
                synchronized (this) {
                    try {
                        wait(150);
                    } catch (InterruptedException e) {}

                    iCurrentMainFrame = j;

                    // just paint the main animation now

                    try {
                        getGraphics().drawImage(
			    currentMainAnimation[iCurrentMainFrame], 
                            iXMainLocation, iYMainLocation, this);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        break;
                    }

                    // repaint();
                }
            }

            // this is the point where the animation ends and 
	    // the balls can be added or dropped

            if (!bIdle) {
                if (bSending) {
                    if (iNumberOfBalls > 1) {
                        iNumberOfBalls--;

                        if (iNumberOfBalls > 0) {
                            getGraphics().drawImage(
				currentBallsAnimation[iNumberOfBalls - 1], 
                                iXBallLocation, iYBallLocation, this);
                        } else {

                            // clear the area

                            getGraphics().clearRect(
				iXBallLocation, iYBallLocation, 
                                currentBallsAnimation[1].getWidth(this), 
                                currentBallsAnimation[1].getHeight(this));
                        }
                    }
                } else {
                    if (iNumberOfBalls < 10) {
                        iNumberOfBalls++;

                        if (iNumberOfBalls > 0) {
                            getGraphics().drawImage(
				currentBallsAnimation[iNumberOfBalls - 1], 
                                iXBallLocation, iYBallLocation, this);
                        } 
                    }
                }

                // repaint();

            }
        }
    }

    /**
     * Paints this component using the given graphics context.
     * This is a standard Java AWT method which typically gets called
     * by the AWT to handle painting this component. It paints this component
     * using the given graphics context. The graphics context clipping region
     * is set to the bounding rectangle of this component and its <0,0>
     * coordinate is this component's top-left corner.
     * 
     * @param g the graphics context used for painting
     * @see java.awt.Component#repaint
     * @see #update
     */
    public void paint(Graphics g) {
        if (currentMainAnimation != null) {
            try {
                g.drawImage(currentMainAnimation[iCurrentMainFrame], 
                            iXMainLocation, iYMainLocation, this);
            } catch (ArrayIndexOutOfBoundsException e) {
            }

            // now we need to paint the balls

            if (iNumberOfBalls > 0) {
                g.drawImage(currentBallsAnimation[iNumberOfBalls - 1], 
                            iXBallLocation, iYBallLocation, this);
            } else {

                // clear the area

                g.clearRect(iXBallLocation, iYBallLocation, 
                            currentBallsAnimation[1].getWidth(this), 
                            currentBallsAnimation[1].getHeight(this));
            }
        }
    }

    /**
     * Handles redrawing of this component on the screen.
     * This is a standard Java AWT method which gets called by the Java
     * AWT (repaint()) to handle repainting this component on the screen.
     * The graphics context clipping region is set to the bounding rectangle
     * of this component and its <0,0> coordinate is this component's
     * top-left corner.
     * Typically this method paints the background color to clear the
     * component's drawing space, sets graphics context to be the foreground
     * color, and then calls paint() to draw the component.
     * 
     * It is overridden here to make clearing the background before painting
     * optional. If the clearFrame flag is true the background will be erased
     * before painting begins.
     * 
     * @param g the graphics context
     * @see java.awt.Component#repaint
     * @see #paint
     */
    public void update(Graphics g) {
        paint(g);
    }

    protected Thread displayThread;

    // animation sequences

    private Image[] currentMainAnimation = null;
    private Image[] currentBallsAnimation = null;
    private int currentAnimationFrames = 10;
    private Image[] receiveAnimation = null;
    private int receiveAnimationFrames = 16;
    private Image[] sendAnimation = null;
    private int sendAnimationFrames = 21;
    private Image[] sendDanceAnimation = null;
    private Image[] receiveDanceAnimation = null;
    private int danceAnimationFrames = 17;
    private Image[] sendBallsAnimation = null;
    private Image[] receiveBallsAnimation = null;
    private int ballsAnimationFrames = 10;
    private int iNumberOfFrames = 0;
    private int iCurrentMainFrame = 0;
    private int iNumberOfBalls = 0;
    private int iXBallLocation = 0;         // location of balls on screen
    private int iYBallLocation = 0;
    private int iXMainLocation = 0;         // location of the main animation 
					    // on screen
    private int iYMainLocation = 0;
    private boolean bSending = true;        // sending or receiving flag
    private boolean bIdle = true;           // idle flag

    // constants

    private int iXSendAnimationLocation = 85;
    private int iYSendAnimationLocation = 5;
    private int iXSendBallLocation = 20;
    private int iYSendBallLocation = 135;
    private int iXReceiveAnimationLocation = 30;
    private int iYReceiveAnimationLocation = 28;
    private int iXReceiveBallLocation = 520;
    private int iYReceiveBallLocation = 115;

}
