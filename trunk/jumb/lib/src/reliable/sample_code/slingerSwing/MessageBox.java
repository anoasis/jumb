/* 
 * Copyright (c) 2001, Sun Microsystems Laboratories 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met: 
 * 
 *     Redistributions of source code must retain the 
 *     above copyright notice, this list of conditions 
 *     and the following disclaimer. 
 *             
 *     Redistributions in binary form must reproduce 
 *     the above copyright notice, this list of conditions 
 *     and the following disclaimer in the documentation 
 *     and/or other materials provided with the distribution. 
 *             
 *     Neither the name of Sun Microsystems, Inc. nor 
 *     the names of its contributors may be used to endorse 
 *     or promote products derived from this software without 
 *     specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE. 
 */

/*
 * A basic extension of the java.awt.Dialog class
 */
package com.sun.multicast.reliable.applications.slinger;

import java.awt.*;
import javax.swing.*;

/**
 * Undocumented Class Declaration.
 * 
 * 
 * @see
 *
 * @author
 */
public class MessageBox extends Dialog {

Frame parent;
int textWidth = 434;
int textHeight = 56;
int width = 536;
int height = 148;

    /**
     * Undocumented Class Constructor.
     * 
     * 
     * @param parent
     * @param title
     * @param message
     *
     * @see
     */
    public MessageBox(Frame parent, String title, String message) {
        super(parent, title, true);

        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        // {{INIT_CONTROLS

	this.parent = parent;
        setLayout(null);
        setVisible(false);

	// Calculate how big the Message box should be.

	if (message.length() > 150) {
	    width = 700;
	    height = 400;
	    textWidth = 600;
	    textHeight = 300;
	}

        setSize(width, height);
        setForeground(new Color(0));
        setBackground(new Color(16777215));

        imagePanel1 = new ImagePanel("images/duke.JPG");

        imagePanel1.setBounds(12, 24, 60, 84);
        add(imagePanel1);

        OKButton = new java.awt.Button();

        OKButton.setLabel("OK");
        OKButton.setBounds((width - 30) / 2, height - 40, 72, 24);
        OKButton.setBackground(new Color(16777215));
        add(OKButton);

        MessageText = 
            new java.awt.TextArea("", 0, 0, 
                                  TextArea.SCROLLBARS_VERTICAL_ONLY);

        MessageText.setEditable(false);
        MessageText.setBounds(84, 34, textWidth, textHeight);




        add(MessageText);
        setTitle("Sun Labs Slinger");

        // }}
        // {{REGISTER_LISTENERS

        SymWindow aSymWindow = new SymWindow();

        this.addWindowListener(aSymWindow);

        SymAction lSymAction = new SymAction();

        OKButton.addActionListener(lSymAction);

        // }}

        MessageText.append(message);
        pack();
        setVisible(true);
    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @see
     */
    public void addNotify() {

        // Record the size of the window prior to calling parents addNotify.

        Dimension d = getSize();

        super.addNotify();

        if (fComponentsAdjusted) {
            return;
        } 

        try {

            // try jdk1.2 method getInsets().
            // Adjust components according to the insets

            setSize(getInsets().left + getInsets().right + d.width, 
                    getInsets().top + getInsets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(getInsets().left, getInsets().top);
                components[i].setLocation(p);
            }
        } catch (NoSuchMethodError e) {

            // try jdk1.1 method insets().
            // Adjust components according to the insets

            setSize(insets().left + insets().right + d.width, 
                    insets().top + insets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(insets().left, insets().top);
                components[i].setLocation(p);
            }
        }

        fComponentsAdjusted = true;
    }

    // Used for addNotify check.

    boolean fComponentsAdjusted = false;

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @see
     */
    public synchronized void show() {
        try {

            // try jdk 1.2 method getBounds().

            Rectangle bounds = getParent().getBounds();
            Rectangle abounds = getBounds();

            setLocation(bounds.x + (bounds.width - abounds.width) / 2, 
                        bounds.y + (bounds.height - abounds.height) / 2);
        } catch (NoSuchMethodError e) {

            // try jdk 1.2 method bounds().

            Rectangle bounds = getParent().bounds();
            Rectangle abounds = bounds();

            move(bounds.x + (bounds.width - abounds.width) / 2, 
                 bounds.y + (bounds.height - abounds.height) / 2);
        }

        super.show();
    }

    // {{DECLARE_CONTROLS

    ImagePanel imagePanel1;
    java.awt.Button OKButton;
    java.awt.TextArea MessageText;

    // }}

    /**
     * Undocumented Class Declaration.
     * 
     * 
     * @see
     *
     * @author
     */
    class SymWindow extends java.awt.event.WindowAdapter {

        /**
         * Undocumented Method Declaration.
         * 
         * 
         * @param event
         *
         * @see
         */
        public void windowClosing(java.awt.event.WindowEvent event) {
            Object object = event.getSource();

            if (object == MessageBox.this) {
                Dialog1_WindowClosing(event);
            } 
        }

    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void Dialog1_WindowClosing(java.awt.event.WindowEvent event) {
        try {
            setVisible(false);
        } catch (NoSuchMethodError e) {
            hide();
        }
    }

    /**
     * Undocumented Class Declaration.
     * 
     * 
     * @see
     *
     * @author
     */
    class SymAction implements java.awt.event.ActionListener {

        /**
         * Undocumented Method Declaration.
         * 
         * 
         * @param event
         *
         * @see
         */
        public void actionPerformed(java.awt.event.ActionEvent event) {
            Object object = event.getSource();

            if (object == OKButton) {
                OKButton_Action(event);
            } 
        }

    }

    /**
     * Undocumented Method Declaration.
     * 
     * 
     * @param event
     *
     * @see
     */
    void OKButton_Action(java.awt.event.ActionEvent event) {
        setVisible(false);
    }

}
