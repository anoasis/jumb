/* 
 * Copyright (c) 2001, Sun Microsystems Laboratories 
 * All rights reserved. 
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met: 
 * 
 *     Redistributions of source code must retain the 
 *     above copyright notice, this list of conditions 
 *     and the following disclaimer. 
 *             
 *     Redistributions in binary form must reproduce 
 *     the above copyright notice, this list of conditions 
 *     and the following disclaimer in the documentation 
 *     and/or other materials provided with the distribution. 
 *             
 *     Neither the name of Sun Microsystems, Inc. nor 
 *     the names of its contributors may be used to endorse 
 *     or promote products derived from this software without 
 *     specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
 * THE POSSIBILITY OF SUCH DAMAGE. 
 */

/*
 * A basic extension of the java.awt.Frame class
 */
package com.sun.multicast.reliable.applications.slinger;

import java.awt.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.FileReader;
import java.util.*;
import java.util.ResourceBundle;
import java.lang.Integer;
import java.lang.Thread;
import java.beans.PropertyVetoException;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;

import com.sun.multicast.reliable.transport.tram.TRAM_INFO;
import com.sun.multicast.reliable.transport.lrmp.LRMP_INFO;




public class SlingerSwing extends JFrame implements ChangeListener {

    public SlingerSwing() {

        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        // {{INIT_CONTROLS

        getContentPane().setLayout(null);

        // getContentPane().setVisible(false);

        getContentPane().setBackground(Color.white);
        setSize(614, 504);

        imagePanel1 = new ImagePanel("images/winback.JPG");

        imagePanel1.setBounds(0, 0, 1000, 1000);
        imagePanel1.setBackground(Color.white);
        imagePanel1.setLayout(null);
        getContentPane().add(imagePanel1);

        tabPanel1 = new JTabbedPane();

        tabPanel1.setBackground(Color.white);

        // tabPanel1.setOpaque(true);

        /*
         * try {
         * java.lang.String[] tempString = new java.lang.String[4];
         * tempString[0] = new java.lang.String("Send File(s)");
         * tempString[1] = new java.lang.String("Receive File(s)");
         * tempString[2] = new java.lang.String("Multicast Settings");
         * tempString[3] = new java.lang.String("Security Details");
         * tabPanel1.setPanelLabels(tempString);
         * }
         * catch(java.beans.PropertyVetoException e) { }
         */

        // try {
        // }
        // catch(java.beans.PropertyVetoException e) { }

        tabPanel1.setBounds(36, 120, 564, 360);

        // tabPanel1.setVisible(false);
        // tabPanel1.setBackground(Color.white);
        // tabPanel1.setLayout(new CardLayout());
        // imagePanel1.add(tabPanel1);

        panel2 = new JPanel();

        panel2.setLayout(null);
        panel2.setVisible(false);
        panel2.setBackground(Color.white);

        // panel2.setOpaque(false);
        // panel2.setBounds(12,33,540,316);

        label1 = new java.awt.Label("Files To Send:");

        label1.setBounds(24, 19, 136, 29);
        panel2.add(label1);

        sendFileTextField = new java.awt.List(4);

        sendFileTextField.setBounds(24, 51, 170, 170);
        panel2.add(sendFileTextField);

        tabPanel1.addTab("Send File(s)", panel2);

        BrowseButton = new java.awt.Button();

        BrowseButton.setLabel("Add...");
        BrowseButton.setBounds(116, 222, 60, 24);
        BrowseButton.setBackground(new Color(16777215));
        panel2.add(BrowseButton);

        button2 = new java.awt.Button();

        button2.setLabel("Remove");
        button2.setBounds(40, 222, 60, 24);
        button2.setBackground(new Color(16777215));
        panel2.add(button2);

        label17 = new java.awt.Label("Transport Protocol:");

        label17.setBounds(24, 256, 144, 24);
        panel2.add(label17);

        transportChoice = new java.awt.Choice();

        transportChoice.addItem("TRAM V"+TRAM_INFO.VERSION);
        // transportChoice.addItem("TRAM V2");
        transportChoice.addItem("Unreliable Multicast Transport");
        transportChoice.addItem("LRMP V"+LRMP_INFO.VERSION);
        transportChoice.addItem("TCP");

        try {
            transportChoice.select(1);
        } catch (IllegalArgumentException e) {}

        panel2.add(transportChoice);
        transportChoice.setBounds(24, 280, 123, 29);
        transportChoice.setFont(new Font("Dialog", Font.PLAIN, 12));

        imageButton1 = new JButton(new ImageIcon("images/sendfile.JPG"));

        imageButton1.setBounds(380, 233, 96, 76);
        imageButton1.setBackground(new Color(16777215));
        panel2.add(imageButton1);

        label2 = new java.awt.Label("Multicast Address:");

        label2.setBounds(228, 27, 127, 29);
        panel2.add(label2);

        label3 = new java.awt.Label("TTL:");

        label3.setBounds(228, 87, 114, 29);
        panel2.add(label3);

        delayTimeTextField = new NumericSpinner();

        try {
            delayTimeTextField.setMax(100000);
        } catch (java.beans.PropertyVetoException e) {}
        try {
            delayTimeTextField.setEditable(true);
        } catch (java.beans.PropertyVetoException e) {}

        delayTimeTextField.setBounds(357, 132, 87, 29);
        delayTimeTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        delayTimeTextField.setForeground(new Color(0));
        delayTimeTextField.setBackground(new Color(16777215));
        panel2.add(delayTimeTextField);

        label4 = new java.awt.Label("Multicast Port:");

        label4.setBounds(228, 57, 115, 29);
        panel2.add(label4);

        label5 = new java.awt.Label("Delay Time:");

        label5.setBounds(229, 133, 112, 29);
        panel2.add(label5);

        label6 = new java.awt.Label("Linger Time:");

        label6.setBounds(230, 165, 115, 29);
        panel2.add(label6);

        label7 = new java.awt.Label("Speed:");

        label7.setBounds(230, 196, 111, 29);
        panel2.add(label7);

        lingerTimeTextField = new NumericSpinner();

        try {
            lingerTimeTextField.setMax(100000);
        } catch (java.beans.PropertyVetoException e) {}
        try {
            lingerTimeTextField.setEditable(true);
        } catch (java.beans.PropertyVetoException e) {}

        lingerTimeTextField.setBounds(357, 165, 87, 29);
        lingerTimeTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        lingerTimeTextField.setForeground(new Color(0));
        lingerTimeTextField.setBackground(new Color(16777215));
        panel2.add(lingerTimeTextField);

        speedTextField = new NumericSpinner();

        try {
            speedTextField.setMax(100000);
        } catch (java.beans.PropertyVetoException e) {}
        try {
            speedTextField.setEditable(true);
        } catch (java.beans.PropertyVetoException e) {}

        speedTextField.setBounds(357, 196, 87, 29);
        speedTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        speedTextField.setForeground(new Color(0));
        speedTextField.setBackground(new Color(16777215));
        panel2.add(speedTextField);

        label8 = new java.awt.Label("seconds");

        label8.setBounds(453, 133, 67, 29);
        panel2.add(label8);

        label9 = new java.awt.Label("seconds");

        label9.setBounds(453, 166, 72, 29);
        panel2.add(label9);

        label10 = new java.awt.Label("bytes/second");

        label10.setBounds(453, 197, 80, 29);
        panel2.add(label10);

        addressTextField = new java.awt.TextField();

        addressTextField.setBounds(356, 26, 157, 29);
        panel2.add(addressTextField);

        portTextField = new java.awt.TextField();

        portTextField.setBounds(356, 56, 156, 29);
        panel2.add(portTextField);

        ttlTextField = new NumericSpinner();

        try {
            ttlTextField.setMin(1);
        } catch (java.beans.PropertyVetoException e) {}
        try {
            ttlTextField.setCurrent(1);
        } catch (java.beans.PropertyVetoException e) {}
        try {
            ttlTextField.setMax(100000);
        } catch (java.beans.PropertyVetoException e) {}
        try {
            ttlTextField.setEditable(true);
        } catch (java.beans.PropertyVetoException e) {}

        ttlTextField.setBounds(356, 86, 87, 29);
        ttlTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        ttlTextField.setForeground(new Color(0));
        ttlTextField.setBackground(new Color(16777215));
        panel2.add(ttlTextField);

        panel3 = new JPanel();

        panel3.setLayout(null);
        panel3.setVisible(false);
        panel3.setBackground(Color.white);

        // panel3.setOpaque(false);
        // panel3.setBounds(12,33,540,316);

        label12 = new java.awt.Label("Receive in Directory:");

        label12.setBounds(24, 63, 203, 29);
        panel3.add(label12);

        label11 = new java.awt.Label("Wait Time:");

        label11.setBounds(24, 147, 77, 29);
        panel3.add(label11);

        waitTimeTextField = new NumericSpinner();

        try {
            waitTimeTextField.setMax(100000);
        } catch (java.beans.PropertyVetoException e) {}
        try {
            waitTimeTextField.setEditable(true);
        } catch (java.beans.PropertyVetoException e) {}

        waitTimeTextField.setBounds(102, 148, 87, 29);
        waitTimeTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        waitTimeTextField.setForeground(new Color(0));
        waitTimeTextField.setBackground(new Color(16777215));
        panel3.add(waitTimeTextField);

        label13 = new java.awt.Label("seconds");

        label13.setBounds(193, 148, 75, 17);
        panel3.add(label13);

        imageButton2 = new JButton(new ImageIcon("images/recvfile.JPG"));

        imageButton2.setBounds(380, 233, 96, 72);
        imageButton2.setBackground(new Color(16777215));
        panel3.add(imageButton2);

        recvDirTextField = new java.awt.TextField();

        recvDirTextField.setBounds(24, 99, 420, 29);
        panel3.add(recvDirTextField);

        browseButton = new java.awt.Button();

        browseButton.setLabel("Browse...");
        browseButton.setBounds(445, 102, 60, 24);
        browseButton.setBackground(new Color(12632256));
        panel3.add(browseButton);
        tabPanel1.addTab("Receive File(s)", panel3);

        panel4 = new JPanel();

        panel4.setLayout(null);
        panel4.setBackground(Color.white);

        // panel4.setOpaque(false);

        panel4.setVisible(false);

        // panel4.setBounds(12,33,540,316);

        label14 = new java.awt.Label("Multicast Channel:");

        label14.setBounds(24, 48, 155, 15);
        panel4.add(label14);

        label23 = new java.awt.Label("(required)");
        label23.setBounds(24, 60, 155, 15);
        panel4.add(label23);

        label15 = new java.awt.Label("Multicast Application:");

        label15.setBounds(24, 87, 155, 15);
        panel4.add(label15);

        label24 = new java.awt.Label("(required)");
        label24.setBounds(24, 99, 155, 15);
        panel4.add(label24);

        label16 = new java.awt.Label("Unicast Port:");

        label16.setBounds(24, 123, 154, 24);
        panel4.add(label16);

        verboseCheckbox = new java.awt.Checkbox("Verbose");

        verboseCheckbox.setBounds(456, 255, 92, 29);
        panel4.add(verboseCheckbox);

        channelTextField = new java.awt.TextField();

        channelTextField.setBounds(181, 51, 348, 29);
        channelTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        panel4.add(channelTextField);

        applicationTextField = new java.awt.TextField();

        applicationTextField.setBounds(181, 87, 348, 29);
        applicationTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        panel4.add(applicationTextField);

        uportTextField = new java.awt.TextField();

        uportTextField.setBounds(181, 123, 348, 29);
        uportTextField.setFont(new Font("Dialog", Font.PLAIN, 12));
        panel4.add(uportTextField);

        label18 = new java.awt.Label("Log To File:");

        label18.setBounds(24, 159, 131, 21);
        panel4.add(label18);

        logFile = new java.awt.TextField();

        logFile.setBounds(180, 159, 348, 29);
        panel4.add(logFile);

        browseLogFile = new java.awt.Button();

        browseLogFile.setLabel("Browse...");
        browseLogFile.setBounds(456, 188, 72, 25);
        browseLogFile.setBackground(new Color(12632256));
        panel4.add(browseLogFile);
        tabPanel1.addTab("Multicast Settings", panel4);

        panel5 = new JPanel();

        panel5.setLayout(null);
        panel5.setBackground(Color.white);
        panel5.setVisible(false);

        label19 = new java.awt.Label("AuthenticationSpec:");

        label19.setBounds(24, 51, 130, 25);
        panel5.add(label19);

        authenticationSpecTextField = new java.awt.TextField();

        authenticationSpecTextField.setBounds(156, 51, 348, 29);
        authenticationSpecTextField.setFont(new Font("Dialog", Font.PLAIN, 
                12));
        panel5.add(authenticationSpecTextField);

        browseAuthFile = new java.awt.Button();

        browseAuthFile.setLabel("Browse...");
        browseAuthFile.setBounds(431, 82, 72, 25);
        browseAuthFile.setBackground(new Color(12632256));
        panel5.add(browseAuthFile);

        label22 = new java.awt.Label("Password:");

        label22.setBounds(24, 102, 130, 25);
        panel5.add(label22);

        authenticationPasswordField = new java.awt.TextField();

        authenticationPasswordField.setBounds(156, 102, 178, 29);
        authenticationPasswordField.setFont(new Font("Dialog", Font.PLAIN, 
                12));
        panel5.add(authenticationPasswordField);




        tabPanel1.addTab("Security Details", panel5);

        imageButton3 = new JButton(new ImageIcon("images/config.JPG"));

        imageButton3.setBounds(500, 32, 84, 72);
        imagePanel1.add(imageButton3);
        setTitle("Sun Labs:  Slinger 6.0");

        // }}

        imagePanel1.add(tabPanel1);

        // layeredPane.moveToBack(imagePanel1);

        tabPanel1.addChangeListener(this);

        // tabPanel1.updateUI();
        // {{INIT_MENUS

        menuBar1 = new java.awt.MenuBar();
        FileMenu = new java.awt.Menu("File");
        HelpMenu = new java.awt.Menu("Help");
        ExitMenu = new java.awt.MenuItem("Exit");
        ParamMenu = new java.awt.MenuItem("Setting Parameters");

        FileMenu.add(ExitMenu);
        menuBar1.add(FileMenu);
        HelpMenu.add(ParamMenu);
        menuBar1.setHelpMenu(HelpMenu);
        setMenuBar(menuBar1);

        // $$ menuBar1.move(144,624);
        // }}
        // {{REGISTER_LISTENERS

        SymWindow aSymWindow = new SymWindow();

        this.addWindowListener(aSymWindow);

        SymMouse aSymMouse = new SymMouse();

        imageButton1.addMouseListener(aSymMouse);

        SymAction lSymAction = new SymAction();

        imageButton3.addActionListener(lSymAction);
        BrowseButton.addActionListener(lSymAction);
        button2.addActionListener(lSymAction);
        browseButton.addActionListener(lSymAction);
        imageButton1.addActionListener(lSymAction);
        imageButton2.addActionListener(lSymAction);
        ExitMenu.addActionListener(lSymAction);
        ParamMenu.addActionListener(lSymAction);
        browseLogFile.addActionListener(lSymAction);
        browseAuthFile.addActionListener(lSymAction);



        // }}
        // check for an auto load config file and load it if necessary

        try {
            char sAutoLoadConfigFile[];

            sAutoLoadConfigFile = new char[100];

            FileReader fAutoLoadFile = new FileReader("slgrconf.ini");

            fAutoLoadFile.read(sAutoLoadConfigFile, 0, 100);
            fAutoLoadFile.close();
            load(new String(sAutoLoadConfigFile));
        } catch (java.io.FileNotFoundException error) {
        } catch (java.io.IOException e) {}

        // create the progress dialog

        progDialog = new SendDialog(this, false);
    }

    public void stateChanged(ChangeEvent e) {

    // tabPanel1.setSelectedIndex(1);
    // tabPanel1.setSelectedIndex(2);
    // System.out.println( e );

    }

    // public void paint (Graphics g) {
    // super.paint(g);
    // g.drawImage(mImage, 0, 25, mImage.getWidth(this), 
    //     mImage.getHeight(this), this);
    // slingerFrame.paintComponents(g);
    // tabPanel1.paintAll(g);
    // }

    /*
     * Main method where the execution starts.
     */

    public static void main(String[] args) {

        // we need to check to see if the user wants a UI or not

        String arg;
        int i = 0;
        boolean bNoGUI = false;

        while (i < args.length && args[i].startsWith("-")) {
            arg = args[i++];

            if (arg.equals("-noGUI")) {
                bNoGUI = true;
            } 
        }
        if (bNoGUI) {

            // create the SlingerWithGUI thread

            SlingerWithGUI slinger = new SlingerWithGUI();

            slinger.initialize(args);
            slinger.start();
        } else {

            // Create an instance of SlingerWithGUI so that non-static 
	    // methods can be called.

            slingerFrame = new SlingerSwing();

            // slingerFrame.pack();

	    slingerFrame.slingerResources = ResourceBundle.getBundle(
		"com.sun.multicast.reliable.applications." +
		"slinger.SlingerResources");

            slingerFrame.setVisible(true);
            slingerFrame.show();

            try {
                slingerFrame.tabPanel1.setVisible(false);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(2);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(1);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(0);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(2);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(1);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(0);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(2);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(1);
                Thread.sleep(500);
                slingerFrame.tabPanel1.setSelectedIndex(0);
                slingerFrame.tabPanel1.setVisible(true);
		if (slingerFrame.clearFileList == true)
	            slingerFrame.sendFileTextField.remove(0);
            } catch (java.lang.InterruptedException error) {}
        }
    }

    public synchronized void show() {
        try {

            // try jdk1.2 method setLocation()

            setLocation(50, 50);
        } catch (NoSuchMethodError e) {
            move(50, 50);
        }

        super.show();
    }

    public void addNotify() {

        // Record the size of the window prior to calling parents addNotify.

        Dimension d = getSize();

        super.addNotify();

        if (fComponentsAdjusted) {
            return;
        } 

        try {

            // try jdk1.2 method getInsets();
            // Adjust components according to the insets

            setSize(getInsets().left + getInsets().right + d.width, 
                    getInsets().top + getInsets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(getInsets().left, getInsets().top);
                components[i].setLocation(p);
            }
        } catch (NoSuchMethodError e) {

            // try jdk1.1 method insets();
            // Adjust components according to the insets

            setSize(insets().left + insets().right + d.width, 
                    insets().top + insets().bottom + d.height);

            Component components[] = getComponents();

            for (int i = 0; i < components.length; i++) {
                Point p = components[i].getLocation();

                p.translate(insets().left, insets().top);
                components[i].setLocation(p);
            }
        }

        fComponentsAdjusted = true;
    }

    // Used for addNotify check.

    boolean fComponentsAdjusted = false;

    // {{DECLARE_CONTROLS

    static SlingerSwing slingerFrame;
    ImagePanel imagePanel1;
    JTabbedPane tabPanel1;
    Image mImage;
    JPanel panel2;
    java.awt.Button BrowseButton;
    java.awt.Label label1;
    javax.swing.JButton imageButton1;
    java.awt.Label label2;
    java.awt.Label label3;
    NumericSpinner delayTimeTextField;
    java.awt.Label label4;
    java.awt.Label label5;
    java.awt.Label label6;
    java.awt.Label label7;
    NumericSpinner lingerTimeTextField;
    NumericSpinner speedTextField;
    java.awt.Label label8;
    java.awt.Label label9;
    java.awt.Label label10;
    java.awt.Button button2;
    java.awt.TextField addressTextField;
    java.awt.TextField portTextField;
    NumericSpinner ttlTextField;
    java.awt.List sendFileTextField;
    boolean clearFileList = false;
    JPanel panel3;
    java.awt.Label label12;
    java.awt.Label label11;
    NumericSpinner waitTimeTextField;
    java.awt.Label label13;
    javax.swing.JButton imageButton2;
    java.awt.TextField recvDirTextField;
    java.awt.Button browseButton;
    JPanel panel4;
    java.awt.Label label14;
    java.awt.Label label15;
    java.awt.Label label16;
    java.awt.Label label17;
    java.awt.Label label23;
    java.awt.Label label24;
    java.awt.Checkbox verboseCheckbox;
    java.awt.TextField channelTextField;
    java.awt.TextField applicationTextField;
    java.awt.TextField uportTextField;
    java.awt.Choice transportChoice;
    java.awt.Label label18;
    java.awt.TextField logFile;
    java.awt.Button browseLogFile;

    // Security details part.

    JPanel panel5;
    java.awt.Label label19;
    java.awt.Label label20;
    java.awt.Label label21;
    java.awt.Label label22;
    java.awt.TextField authenticationSpecTextField;
    java.awt.TextField authenticationPasswordField;
    java.awt.Button browseAuthFile;



    javax.swing.JButton imageButton3;

    // }}
    // {{DECLARE_MENUS

    java.awt.MenuBar menuBar1;
    java.awt.Menu FileMenu;
    java.awt.Menu HelpMenu;
    java.awt.MenuItem ExitMenu;
    java.awt.MenuItem ParamMenu;

    // }}

    private Properties properties;
    String configFile;
    private String[] args;
    private SendDialog progDialog;
    SlingerWithGUI slingerThread;
    java.awt.FileDialog fDialog;
    private transient ResourceBundle slingerResources;

    class SymWindow extends java.awt.event.WindowAdapter {

        public void windowClosing(java.awt.event.WindowEvent event) {
            Object object = event.getSource();

            if (object == SlingerSwing.this) {
                Frame1_WindowClosing(event);
            } 
        }

    }

    void Frame1_WindowClosing(java.awt.event.WindowEvent event) {
        try {

            // try jdk1.2 method setVisible();

            setVisible(false);
        } catch (NoSuchMethodError e) {

            // try jdk1.2 method hide();

            hide();     // hide the Frame
        }
    }

    class SymMouse extends java.awt.event.MouseAdapter {

        public void mouseClicked(java.awt.event.MouseEvent event) {
            Object object = event.getSource();

            if (object == imageButton1) {
                imageButton1_mouseClicked(event);
            } 
        }

    }

    void imageButton1_mouseClicked(java.awt.event.MouseEvent event) {
        progDialog.setMode(true, true, true);

        // send the file(s)

        formCommandLine(true);

        // create the SlingerWithGUI thread

        SlingerWithGUI slinger = new SlingerWithGUI(progDialog);

        slingerThread = slinger;

        slinger.initialize(args);
        slinger.start();
    }

    class SymAction implements java.awt.event.ActionListener {

        public void actionPerformed(java.awt.event.ActionEvent event) {
            Object object = event.getSource();

            if (object == BrowseButton) {
                BrowseButton_Action(event);
            } else if (object == button2) {
                button2_Action(event);
            } else if (object == browseButton) {
                browseButton_Action(event);
            } else if (object == imageButton2) {
                imageButton2_actionPerformed(event);
            } else if (object == imageButton3) {
                imageButton3_actionPerformed(event);
            } else if (object == ExitMenu) {
                ExitMenu_Action(event);
            } else if (object == ParamMenu) {
                ParamMenu_Action(event);
            } else if (object == browseLogFile) {
                browseLogFile_ActionPerformed(event);
            } else if (object == browseAuthFile) {
                browseAuthFile_ActionPerformed(event);
            }



        }

    }

    /*
     * Method to load the properties from the configuration file.
     */

    boolean load(String cfile) {
        configFile = cfile;

        File tmpfile = new File(cfile);

        if (tmpfile.exists() &&!tmpfile.isFile()) {
            return false;
        } 

        try {
            properties = new Properties();

            properties.load(new FileInputStream(cfile));

            String tmp;

            if ((tmp = properties.getProperty("slinger.channel")) != null) {
                channelTextField.setText(tmp);
            } else {
                channelTextField.setText("");
            }
            if ((tmp = properties.getProperty("slinger.application")) 
                    != null) {
                applicationTextField.setText(tmp);
            } else {
                applicationTextField.setText("");
            }
            if ((tmp = properties.getProperty("slinger.address")) != null) {
                addressTextField.setText(tmp);
            } else {
                addressTextField.setText("");
            }
            if ((tmp = properties.getProperty("slinger.port")) != null) {
                portTextField.setText(tmp);
            } else {
                portTextField.setText("");
            }
            if ((tmp = properties.getProperty("slinger.uport")) != null) {
                uportTextField.setText(tmp);
            } else {
                uportTextField.setText("");
            }
            if ((tmp = properties.getProperty("slinger.logfile")) != null) {
                logFile.setText(tmp);
            } else {
                logFile.setText("");
            }
            if ((tmp = properties.getProperty("slinger.authenticationSpec")) 
                    != null) {
                authenticationSpecTextField.setText(tmp);
            } else {
                authenticationSpecTextField.setText("");
            }



            if ((tmp = 
                    properties.getProperty("slinger.authenticationPassword")) 
                    != null) {
                authenticationPasswordField.setText(tmp);
            } else {
                authenticationPasswordField.setText("");
            }
            if ((tmp = properties.getProperty("slinger.transport")) != null) {
                transportChoice.select(tmp);
            } else {
                transportChoice.select(0);
            }
            if ((tmp = properties.getProperty("slinger.send")) != null) {

                // first clear the list box

                sendFileTextField.removeAll();

                // fill the send list box

                String fItem;
                int fLastSpace = -1;
                int fSpace = 0;

                // get the first space

                while (fSpace != -1) {
                    fSpace = tmp.indexOf(" ", fLastSpace + 1);

                    if (fSpace == -1) {
                        fItem = tmp.substring(fLastSpace + 1, tmp.length());
                    } else {
                        fItem = tmp.substring(fLastSpace + 1, fSpace);
                    }

                    try {

                        // JDK 1.2

                        sendFileTextField.add(fItem);
                    } catch (NoSuchMethodError e) {

                        // JDK 1.1

                        sendFileTextField.addItem(fItem);
                    }

                    fLastSpace = fSpace;
                }

                try {

                    // try jdk1.2 method

                    sendFileTextField.select(sendFileTextField.getItemCount());
                } catch (NoSuchMethodError e) {

                    // try jdk1.1 method

                    sendFileTextField.select(sendFileTextField.countItems());
                }
            } else {
		clearFileList = true;
	        sendFileTextField.add("dummy");
            }
            if ((tmp = properties.getProperty("slinger.receive")) != null) {
                recvDirTextField.setText(tmp);
            } else {
                recvDirTextField.setText("");
            }

            tmp = properties.getProperty("slinger.ttl");

            if ((tmp != null) && (tmp.length() != 0)) {
                Integer iTTL = java.lang.Integer.valueOf(tmp);

                ttlTextField.setCurrent(iTTL.intValue());
            } else {
                ttlTextField.setCurrent(0);
            }

            tmp = properties.getProperty("slinger.delay");

            if ((tmp != null) && (tmp.length() != 0)) {
                Integer iDelay = java.lang.Integer.valueOf(tmp);

                delayTimeTextField.setCurrent(iDelay.intValue());
            } else {
                delayTimeTextField.setCurrent(0);
            }

            tmp = properties.getProperty("slinger.linger");

            if ((tmp != null) && (tmp.length() != 0)) {
                Integer iDelay = java.lang.Integer.valueOf(tmp);

                lingerTimeTextField.setCurrent(iDelay.intValue());
            } else {
                lingerTimeTextField.setCurrent(0);
            }

            tmp = properties.getProperty("slinger.wait");

            if ((tmp != null) && (tmp.length() != 0)) {
                Integer iDelay = java.lang.Integer.valueOf(tmp);

                waitTimeTextField.setCurrent(iDelay.intValue());
            } else {
                waitTimeTextField.setCurrent(0);
            }

            tmp = properties.getProperty("slinger.speed");

            if ((tmp != null) && (tmp.length() != 0)) {
                Integer iDelay = java.lang.Integer.valueOf(tmp);

                speedTextField.setCurrent(iDelay.intValue());
            } else {
                speedTextField.setCurrent(0);
            }
            if (!properties.getProperty("slinger.verbose", 
                                        "false").equals("false")) {
                verboseCheckbox.setState(true);
            } 
        } catch (FileNotFoundException e) {
            new MessageBox(this, "Sun Labs Slinger", 
                           "Configuration file " + cfile 
                           + " not found or is not readable.");

            return false;
        } catch (SecurityException e) {
            new MessageBox(this, "Sun Labs Slinger", 
                           "Configuration file " + cfile + " not readable.");

            return false;
        } catch (IOException e) {
            new MessageBox(this, "Sun Labs Slinger", 
                           "IO Error while trying to read Configuration file " 
                           + cfile + ".");

            return false;
        } catch (java.beans.PropertyVetoException e) {

        // new MessageBox(this, "Sun Labs Slinger", 
	//     "Property Veto Error while reading " + cfile + ".");
        // return false;

        }

        return true;
    }

    /*
     * Method to save the properties to the configuration file.
     */

    boolean save(String cfile) {
        File tmpfile = new File(cfile);

        if (tmpfile.exists() &&!tmpfile.isFile()) {
            return false;
        } 

        try {
            properties = new Properties();

            String tmp;
            int iTmp;

            if ((tmp = channelTextField.getText()) != null) {
                properties.put("slinger.channel", tmp);
            } 
            if ((tmp = applicationTextField.getText()) != null) {
                properties.put("slinger.application", tmp);
            } 
            if ((tmp = addressTextField.getText()) != null) {
                properties.put("slinger.address", tmp);
            } 
            if ((tmp = portTextField.getText()) != null) {
                properties.put("slinger.port", tmp);
            } 
            if ((tmp = uportTextField.getText()) != null) {
                properties.put("slinger.uport", tmp);
            } 
            if ((tmp = logFile.getText()) != null) {
                properties.put("slinger.logfile", tmp);
            } 
            if ((tmp = authenticationSpecTextField.getText()) != null) {
                properties.put("slinger.authenticationSpec", tmp);
            } 
 

            if ((tmp = authenticationPasswordField.getText()) != null) {
                properties.put("slinger.authenticationPassword", tmp);
            } 
            if ((tmp = transportChoice.getSelectedItem()) != null) {
                properties.put("slinger.transport", tmp);
            } 

            try {

                // try jdk1.2 method

                if ((sendFileTextField.getItemCount()) != 0) {

                    // there are items in the list, parse them into one string

                    String sendFiles = "";

                    for (int i = 0; i < sendFileTextField.getItemCount(); 
                            i++) {
                        if (i 
                                != sendFileTextField.getItemCount() 
                                   - 1) {       // not last one
                            sendFiles = sendFiles 
                                        + sendFileTextField.getItem(i) + " ";
                        } else {
                            sendFiles = sendFiles 
                                        + sendFileTextField.getItem(i);
                        }
                    }

                    properties.put("slinger.send", sendFiles);
                }
            } catch (NoSuchMethodError e) {

                // try jdk1.1 method

                if ((sendFileTextField.countItems()) != 0) {

                    // there are items in the list, parse them into one string

                    String sendFiles = "";

                    for (int i = 0; i < sendFileTextField.countItems(); i++) {
                        if (i 
                                != sendFileTextField.countItems() 
                                   - 1) {       // not last one
                            sendFiles = sendFiles 
                                        + sendFileTextField.getItem(i) + " ";
                        } else {
                            sendFiles = sendFiles 
                                        + sendFileTextField.getItem(i);
                        }
                    }

                    properties.put("slinger.send", sendFiles);
                }
            }

            if ((tmp = recvDirTextField.getText()) != null) {
                properties.put("slinger.receive", tmp);
            } 
            if ((tmp = ttlTextField.getEntryFieldText()) != null) {
                properties.put("slinger.ttl", tmp);
            } 
            if ((tmp = delayTimeTextField.getEntryFieldText()) != null) {
                properties.put("slinger.delay", tmp);
            } 
            if ((tmp = lingerTimeTextField.getEntryFieldText()) != null) {
                properties.put("slinger.linger", tmp);
            } 
            if ((tmp = waitTimeTextField.getEntryFieldText()) != null) {
                properties.put("slinger.wait", tmp);
            } 
            if ((tmp = speedTextField.getEntryFieldText()) != null) {
                properties.put("slinger.speed", tmp);
            } 

            properties.put("slinger.verbose", 
		java.lang.String.valueOf(verboseCheckbox.getState()));

            // now save the properties

            try {

                // JDK1.2

                properties.store(new FileOutputStream(cfile), 
                                 "Sun Labs - Slinger Property Settings");
            } catch (NoSuchMethodError e) {

                // JDK1.1

                properties.save(new FileOutputStream(cfile), 
                                "Sun Labs - Slinger Property Settings");
            }
        } catch (SecurityException e) {
            new MessageBox(this, "Sun Labs Slinger", 
                           "You cannot access" + cfile + ".");

            return false;
        } catch (IOException e) {
            new MessageBox(this, "Sun Labs Slinger", 
                "Configuration file " + cfile + " not readable.");

            return false;
        }

        return true;
    }

    void BrowseButton_Action(java.awt.event.ActionEvent event) {

        // browse button

        fDialog = new java.awt.FileDialog(this, "Add Files To Send List", 
                                          java.awt.FileDialog.LOAD);

        String fConfigStr = "*.*";

        fDialog.setFile(fConfigStr);
        fDialog.show();

        // now get the file name and put it in the text field

        String fFileName = fDialog.getFile();

        if (fFileName.compareTo("null") != 0) {
            try {

                // jdk1.2 method

                sendFileTextField.add(fDialog.getDirectory() + fFileName);
                sendFileTextField.select(sendFileTextField.getItemCount());
            } catch (NoSuchMethodError e) {

                // jdk1.1 method

                sendFileTextField.addItem(fDialog.getDirectory() + fFileName);
                sendFileTextField.select(sendFileTextField.countItems());
            }
        }

        // get rid of the dialog so it can be created from scratch next time

        fDialog.dispose();
    }

    void button2_Action(java.awt.event.ActionEvent event) {
        if (sendFileTextField.getSelectedIndex() < 0) {
            return;
        } 

        // {{CONNECTION
        // Delete the selected items from the list

        sendFileTextField.remove(sendFileTextField.getSelectedIndex());


    // }}

    }

    void browseButton_Action(java.awt.event.ActionEvent event) {

        // browse button

        fDialog = 
            new java.awt.FileDialog(this, 
                                    "Find a Directory for Received Files", 
                                    java.awt.FileDialog.LOAD);

        String fConfigStr = "-";

        fDialog.setFile(fConfigStr);
        fDialog.show();

        // now get the file name and put it in the text field

        if ((fDialog.getDirectory() != null) 
                && (fDialog.getDirectory()).length() != 0) {
            recvDirTextField.setText(fDialog.getDirectory());
        } 

        // get rid of the dialog so it can be created from scratch next time

        fDialog.dispose();
    }

    /*
     * Helper method called from the setFocus method to do the actual
     * task of setting the focus.
     */

    void setFocusHelper(TextField ta) {
        if (ta != null) {
            ta.setSelectionStart(0);
            ta.setSelectionEnd(ta.getText().length());
            ta.requestFocus();
        } else {
            addressTextField.requestFocus();
        }
    }

    /*
     * Method to form the command line from the values filled in the frame.
     * The values are put in a array of String args which is then passed on
     * to the doOperations method of SlingerWithGUI for error checking and 
     * proceed with the actual transmission / reception in case of no errors.
     */

    void formCommandLine(boolean send) {
        String cmdline = new String();

        if (send) {
            try {

                // try jdk1.2 method

                if ((sendFileTextField.getItemCount()) != 0) {

                    // there are items in the list, parse them into one string

                    String sendFiles = "";

                    for (int i = 0; i < sendFileTextField.getItemCount(); 
                            i++) {
                        sendFiles = sendFiles + " " 
                                    + sendFileTextField.getItem(i);
                    }

                    sendFiles.trim();

                    cmdline = cmdline.concat("-send" + "^");

                    StringTokenizer st = new StringTokenizer(sendFiles);

                    while (st.hasMoreTokens()) {
                        cmdline = cmdline.concat(st.nextToken() + "^");
                    }
                }
            } catch (NoSuchMethodError e) {

                // try jdk1.1 method

                if ((sendFileTextField.countItems()) != 0) {

                    // there are items in the list, parse them into one string

                    String sendFiles = "";

                    for (int i = 0; i < sendFileTextField.countItems(); i++) {
                        sendFiles = sendFiles + " " 
                                    + sendFileTextField.getItem(i);
                    }

                    sendFiles.trim();

                    cmdline = cmdline.concat("-send" + "^");

                    StringTokenizer st = new StringTokenizer(sendFiles);

                    while (st.hasMoreTokens()) {
                        cmdline = cmdline.concat(st.nextToken() + "^");
                    }
                }
            }

            if (addressTextField.getText().length() != 0) {
                cmdline = cmdline.concat("-address" + "^" 
                                         + addressTextField.getText() + "^");
            }
            if (portTextField.getText().length() != 0) {
                cmdline = cmdline.concat("-port" + "^" 
                                         + portTextField.getText() + "^");
            }
            if (uportTextField.getText().length() != 0) {
                cmdline = cmdline.concat("-uport" + "^" 
                                         + uportTextField.getText() + "^");
            }
            if (logFile.getText().length() != 0) {
                cmdline = cmdline.concat("-logfile" + "^" + logFile.getText() 
                                         + "^");
            }
            if (transportChoice.getSelectedItem().length() != 0) {
                cmdline = cmdline.concat("-transport" + "^" 
                                         + transportChoice.getSelectedItem() 
                                         + "^");
            }
            if (ttlTextField.getEntryFieldText().length() != 0) {
                cmdline = cmdline.concat("-ttl" + "^" 
                                         + ttlTextField.getEntryFieldText() 
                                         + "^");
            }
            if (waitTimeTextField.getEntryFieldText().length() != 0) {
                cmdline = 
                    cmdline.concat("-wait" + "^" 
                                   + waitTimeTextField.getEntryFieldText() 
                                   + "^");
            }
            if (delayTimeTextField.getEntryFieldText().length() != 0) {
                cmdline = 
                    cmdline.concat("-delay" + "^" 
                                   + delayTimeTextField.getEntryFieldText() 
                                   + "^");
            }
            if (lingerTimeTextField.getEntryFieldText().length() != 0) {
                cmdline = 
                    cmdline.concat("-linger" + "^" 
                                   + lingerTimeTextField.getEntryFieldText() 
                                   + "^");
            }
            if (speedTextField.getEntryFieldText().length() != 0) {
                cmdline = cmdline.concat("-speed" + "^" 
                                         + speedTextField.getEntryFieldText() 
                                         + "^");
            }
        } else {
            if (recvDirTextField.getText().length() != 0) {
                cmdline = cmdline.concat("-receive" + "^" 
                                         + recvDirTextField.getText() + "^");
            }
            if (waitTimeTextField.getEntryFieldText().length() != 0) {
                cmdline = 
                    cmdline.concat("-wait" + "^" 
                                   + waitTimeTextField.getEntryFieldText() 
                                   + "^");
            }
        }

        // HMC - never send the config file in GUI mode! It will just 
        // override the current settings
        // if ((configFile != null) && (configFile.length() != 0)) {
        // cmdline = cmdline.concat("-config" + "^" + configFile + "^");
        // }

        if (channelTextField.getText().length() != 0) {
            cmdline = cmdline.concat("-channel" + "^" 
                                     + channelTextField.getText() + "^");
        }
        if (applicationTextField.getText().length() != 0) {
            cmdline = cmdline.concat("-application" + "^" 
                                     + applicationTextField.getText() + "^");
        }
        if (uportTextField.getText().length() != 0) {
            cmdline = cmdline.concat("-uport" + "^" 
                                     + uportTextField.getText() + "^");
        }
        if (logFile.getText().length() != 0) {
            cmdline = cmdline.concat("-logfile" + "^" + logFile.getText() 
                                     + "^");
        }
        if (authenticationSpecTextField.getText().length() != 0) {
            cmdline = cmdline.concat("-authenticationSpec" + "^" 
                                     + authenticationSpecTextField.getText() 
                                     + "^");
        }



        if (authenticationPasswordField.getText().length() != 0) {
            cmdline = cmdline.concat("-authenticationPassword" + "^" 
                                     + authenticationPasswordField.getText() 
                                     + "^");
        }
        if (verboseCheckbox.getState() == true) {
            cmdline = cmdline.concat("-verbose^");
        }

        StringTokenizer st = new StringTokenizer(cmdline, "^", false);

        args = new String[st.countTokens()];

        int i;

        for (i = 0; st.hasMoreTokens(); ++i) {
            args[i] = st.nextToken();
        }
    }

    void stopSlingerThread() {
        progDialog.setMessage("Cancelling...");

        if (slingerThread != null) {
            slingerThread.cleanup();

            // slingerThread.stop();  // deprecated
            // System.out.println("stopSlingerThread()");

            slingerThread = null;
        }

        progDialog.setVisible(false);
    }

    void imageButton2_actionPerformed(java.awt.event.ActionEvent event) {
        progDialog.setMode(false, true, true);

        // receive the file(s)

        formCommandLine(false);

        SlingerWithGUI slinger = new SlingerWithGUI(progDialog);

        slingerThread = slinger;

        slinger.initialize(args);
        slinger.start();
    }

    void imageButton3_actionPerformed(java.awt.event.ActionEvent event) {

        // to do: code goes here.
        // {{CONNECTION
        // Create and show as modal

        (new Config(this, true, configFile)).show();

    // }}

    }

    void ExitMenu_Action(java.awt.event.ActionEvent event) {
        System.exit(0);
    }

    void ParamMenu_Action(java.awt.event.ActionEvent event) {
	MessageBox m = new MessageBox(this, "Sun Labs Slinger", 
		slingerResources.getString("help"));
        m.dispose();
    }

    void browseLogFile_ActionPerformed(java.awt.event.ActionEvent event) {

        // browse button

        fDialog = new java.awt.FileDialog(this, "Select a Log File", 
                                          java.awt.FileDialog.LOAD);

        String fConfigStr = "*.log";

        fDialog.setFile(fConfigStr);
        fDialog.show();

        // now get the file name and put it in the text field

        String fFileName = fDialog.getFile();

        if (fFileName.compareTo("null") != 0) {
            logFile.setText(fDialog.getDirectory() + fFileName);
        } 

        // get rid of the dialog so it can be created from scratch next time

        fDialog.dispose();
    }

    void browseAuthFile_ActionPerformed(java.awt.event.ActionEvent event) {

        // browse button

        fDialog = new java.awt.FileDialog(this, 
                                          "Select Authentication Spec File", 
                                          java.awt.FileDialog.LOAD);

        String fConfigStr = "*.spec";

        fDialog.setFile(fConfigStr);
        fDialog.show();

        // now get the file name and put it in the text field

        String fFileName = fDialog.getFile();

        if (fFileName.compareTo("null") != 0) {
            authenticationSpecTextField.setText(fDialog.getDirectory() 
                                                + fFileName);
        } 

        // get rid of the dialog so it can be created from scratch next time

        fDialog.dispose();
    }



}


